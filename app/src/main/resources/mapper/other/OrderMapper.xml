<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.app.mapper.other.OrderMapper">
    <select id="selectOrder" resultType="model.dto.other.OrderEntity">
        SELECT
        A.id,
        A.room_id AS roomId,
        C.name AS roomName,
        A.type,
        A.in_date AS inDate,
        A.out_date AS outDate,
        A.price,
        A.deposit,
        CASE
            WHEN A.status = '預訂' THEN A.price-A.deposit
            ELSE 0
        END AS 'unPaid',
        A.customer_id AS customerId,
        IFNULL(B.name,'旅客') AS customerName,
        A.status,
        A.update_user AS updateUser,
        D.user_name_ch AS updateUserName,
        A.update_time AS updateTime
        FROM ly_order AS A
        LEFT JOIN ly_customer AS B
        ON A.customer_id = B.id
        INNER JOIN ly_room AS C
        ON A.room_id = C.id
        LEFT JOIN sys_user AS D
        ON A.update_user = D.id
        WHERE
        1 = 1
        <if test="roomId != null and roomId != ''">
            and A.room_id = #{roomId}
        </if>
        <if test="inDate != null">
            and DATE_FORMAT(A.in_date,'%Y-%m-%d') &lt;= DATE_FORMAT(#{inDate},'%Y-%m-%d')
            and DATE_FORMAT(A.out_date,'%Y-%m-%d') >= DATE_FORMAT(#{inDate},'%Y-%m-%d')
        </if>
        <if test="customerId != null and customerId != ''">
            and A.customer_id = #{customerId}
        </if>
        <if test="id != null">
            and A.id = #{id}
        </if>
        ORDER BY
        A.in_date, C.name
    </select>

    <insert id="insertRevenue" parameterType="list" >
        insert into ly_order_revenue
        (order_id, payment, type, revenue, revenue_user, revenue_date) values
        <foreach collection="list" item="item"  separator=",">
            (#{item.orderId}, #{item.payment}, #{item.type}, #{item.revenue}, #{item.revenueUser}, #{item.revenueDate})
        </foreach>
    </insert>

    <update id="updateRoomStatus" parameterType="model.dto.other.UpdateRoom">
        UPDATE ly_room SET
            status = #{status}
        WHERE id = #{id}
    </update>

    <update id="checkIn" parameterType="model.dto.other.CheckIn">
        UPDATE ly_order_revenue SET
            payment = #{payment},
            type = '房費',
            revenue_user = #{revenueUser},
            revenue_date = #{revenueDate}
        WHERE type = '未付款'
        AND order_id = #{id};

        UPDATE ly_room SET
            status = #{type}
        WHERE id = #{roomId};

        UPDATE ly_order SET
            status = '入住',
            in_date = #{revenueDate}
        WHERE id = #{id}
    </update>

    <select id="selectReport" resultType="model.dto.other.ReportResponse">
        SELECT
            IFNULL(B.name,'旅客') AS customerName,
            C.name AS roomName,
            A.type AS orderType,
            A.memo AS orderMemo,
            CASE
                WHEN D.type = '未付款' THEN ''
                ELSE D.payment
            END AS 'payment',
            D.type AS revenueType,
            D.revenue,
            D.memo AS revenueMemo,
            E.user_name_ch AS revenueUserName,
            D.revenue_date AS revenueDate
        FROM ly_order AS A
        LEFT JOIN ly_customer AS B
        ON A.customer_id = B.id
        INNER JOIN ly_room AS C
        ON A.room_id = C.id
        INNER JOIN ly_order_revenue AS D
        ON A.id = D.order_id
        INNER JOIN sys_user AS E
        ON D.revenue_user = E.id
        WHERE 1 = 1

        <if test="startDate != null">
            and D.revenue_date >= #{startDate}
        </if>
        <if test="endDate != null">
            and D.revenue_date &lt;= #{endDate}
        </if>
        <if test="orderType != null and orderType != ''">
            and A.type = #{orderType}
        </if>
        <if test="payment != null and payment != ''">
            and D.payment = #{payment}
        </if>
        <if test="revenueType != null and revenueType != ''">
            and D.type = #{revenueType}
        </if>
        <if test="revenueUser != null">
            and D.revenue_user = #{revenueUser}
        </if>

        ORDER BY D.revenue_date, D.revenue_user, C.name
    </select>

    <select id="isOverlap" resultType="model.dto.other.OrderEntity">
        SELECT id FROM ly_order
            WHERE 1=1
        AND status NOT IN ('作廢', '退房')
        AND room_id = #{roomId}
        AND in_date &lt;= #{outDate}
        AND out_date >= #{inDate}
        <if test="id != 0">
            AND id &lt;> #{id}
        </if>
    </select>

    <update id="cancelOrder" parameterType="model.dto.other.CancelOrder">

        <if test="cash != 0">
            insert into ly_order_revenue
            (order_id, payment, type, revenue, memo, revenue_user, revenue_date) values
            (#{id}, '現金', '作廢', #{cash}, #{memo}, #{updateUser}, #{updateTime});
        </if>

        <if test="card != 0">
            insert into ly_order_revenue
            (order_id, payment, type, revenue, memo, revenue_user, revenue_date) values
            (#{id}, '刷卡', '作廢', #{card}, #{memo}, #{updateUser}, #{updateTime});
        </if>

        <if test="cash == 0 and card == 0">
            UPDATE ly_order_revenue SET
                type = '作廢',
                revenue = 0,
                revenue_date = #{updateTime},
                memo = #{memo}
            WHERE type = '未付款'
              AND order_id = #{id};

            UPDATE ly_order_revenue SET
                type = '作廢',
                revenue_date = #{updateTime},
                memo = #{memo}
            WHERE type = '房費'
            AND order_id = #{id};
        </if>

        <if test="cash != 0 or card != 0">
            DELETE FROM ly_order_revenue
            WHERE type = '未付款'
              AND order_id = #{id};
        </if>

        UPDATE ly_order SET
            status = '作廢',
            update_user = #{updateUser},
            update_time = #{updateTime}
        WHERE id = #{id};

        UPDATE ly_room SET
            status = '空房',
            update_user = #{updateUser},
            update_time = #{updateTime}
        WHERE id = #{roomId};
    </update>

</mapper>