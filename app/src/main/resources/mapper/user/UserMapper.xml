<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.app.mapper.user.UserMapper">

    <select id="listUser" resultType="model.vo.sys.SelectUserVo">
        SELECT DISTINCT
            user.id,
            user.user_name AS userName,
            user.user_name_ch AS userChName,
            user.user_name_en AS userEnName,
            user.email,
            user.address,
            user.is_available AS available,
            user.last_login_time AS lastLoginTime,
            user.create_time AS createTime
        FROM
            sys_user user
        WHERE
        1 = 1
        <if test="userName != null and userName != ''">
            and (user.user_name_ch like concat('%',#{userName},'%') or user.user_name_en like concat('%',#{userName},'%'))
        </if>
        <if test="available != null">
            and is_available = #{available}
        </if>
        <if test="mobile != null">
            and user.user_name like concat('%',#{mobile},'%')
        </if>
        <if test="roleID != null">
            AND EXISTS (
                SELECT 1
                FROM user_role ur
                WHERE ur.user_id = user.id
                AND ur.role_id = #{roleID} )
        </if>
        ORDER BY
            user.create_time desc
    </select>

    <select id="selectUserVoById" resultType="model.vo.sys.DetailUserVo">
        SELECT DISTINCT
            user.id,
            user.user_name AS userName,
            user.user_name_ch AS userChName,
            user.user_name_en AS userEnName,
            user.email,
            user.address,
            user.is_available AS available,
            user.bank_code AS bankCode,
            user.bank_account AS bankAccount,
            user.emergency_contact_person AS emergencyContactPerson ,
            user.emergency_contact_relationship AS emergencyContactRelationship,
            user.emergency_contact_phone AS emergencyContactPhone,
            user.last_login_time AS lastLoginTime,
            user.create_time AS createTime,
            user.picture_file_name AS pictureFileName,
            user.join_time AS joinTime,
            user.email_account AS emailAccount,
            user.email_key AS emailKey
        FROM
            sys_user user
        WHERE
            user.id = #{id}
    </select>

    <select id="selectUserChildByParentId" resultType="model.vo.sys.UserChildVo">
        SELECT DISTINCT
            child.id,
            child.parent_id AS parentId,
            child.id_number AS idNumber,
            child.user_name_ch AS userChName,
            child.user_name_en AS userEnName,
            child.birth,
            child.gender,
            child.phone,
            child.is_available AS available
        FROM
            sys_user_child child
        WHERE
            child.parent_id = #{id}
        ORDER BY
            child.id
    </select>

    <delete id="deleteUserChild">
        DELETE FROM sys_user_child
        WHERE
            parent_id = #{id}
    </delete>

    <insert id="insertUserChildByList" parameterType="list" >
        INSERT INTO
        sys_user_child(parent_id, id_number, user_name_ch, user_name_en, birth, gender, phone, is_available) values
        <foreach collection="list" item="item"  separator=",">
            (#{item.parentId},#{item.idNumber},#{item.userChName},#{item.userEnName},#{item.birth},#{item.gender},#{item.phone},#{item.available})
        </foreach>
    </insert>

    <insert id="insertUserChild" parameterType="model.entity.sys.UserChild" >
        INSERT INTO
        sys_user_child(parent_id, id_number, user_name_ch, user_name_en, birth, gender, phone, is_available) values
            (#{parentId},#{idNumber},#{userChName},#{userEnName},#{birth},#{gender},#{phone},#{available})
    </insert>

    <update id="updateUserChild" parameterType="model.entity.sys.UserChild" >
        UPDATE sys_user_child
        SET
            id_number = #{idNumber},
            user_name_ch = #{userChName},
            user_name_en = #{userEnName},
            birth = #{birth},
            gender = #{gender},
            phone = #{phone},
            is_available = #{available}
        WHERE
            id = #{id}
    </update>

    <select id="listUserChild" resultType="model.vo.sys.UserChildVo">
        SELECT DISTINCT
            child.id,
            child.user_name_ch AS userChName,
            child.user_name_en AS userEnName
        FROM sys_user_child AS child
        INNER JOIN sys_user AS user
            ON child.parent_id = user.id
            AND user.is_available = 1
        WHERE 1 = 1
        AND child.is_available = 1
        <if test="_parameter != null and _parameter != ''">
            AND (child.user_name_en like concat('%',#{name},'%') OR child.user_name_ch like concat('%',#{name},'%'))
        </if>
        ORDER BY child.user_name_en
    </select>

    <select id="getParentId" resultType="java.lang.Integer">
        SELECT parent_id
        FROM
            sys_user_child
        WHERE
            id = #{studentId}
    </select>

</mapper>
